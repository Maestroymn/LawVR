using DatabaseScripts;
using System;
using System.Diagnostics;
using System.IO;
using System.Threading;
using Data;
using Managers;
using Photon.Pun;
using UnityEngine;
using System.Text;

namespace Utilities
{
    public class SpeechRecognition : MonoBehaviour
    {
        static string PythonScriptPath;
        static string PythonExePath;
        static string WorkingDirectory;
        static char DirSep;
        static Thread PythonThread;
        static string Language;
        // Start is called before the first frame update
        void Awake()
        {
            DirSep = Path.DirectorySeparatorChar;
            PythonScriptPath = @Application.dataPath + DirSep + "Python"+ DirSep + "listen_user_test.py";


            WorkingDirectory = @Application.dataPath + DirSep + "Python";
#if UNITY_EDITOR_WIN || UNITY_STANDALONE_WIN
            PythonExePath = @Application.dataPath + DirSep + "Python" + DirSep + "Python38"+  DirSep+  "python.exe";
#elif UNITY_EDITOR_OSX || UNITY_STANDALONE_OSX
            WorkingDirectory = "/usr/bin";
            PythonExePath = WorkingDirectory + DirSep + "python";
#endif
        }

        public static void SpeechRecognitionCaller(string language)
        {
            Language = language;
            PythonThread = new Thread(RunPythonListenerScript);
            PythonThread.Start();
        }

        public static void RunPythonListenerScript()
        {
            UnityEngine.Debug.Log( string.Format("\"{0}\" ", PythonScriptPath));
            ProcessStartInfo start = new ProcessStartInfo();
            string sessionid = PhotonNetwork.CurrentRoom.CustomProperties[DataKeyValues.__SESSION_ID__].ToString();
            string username = GameManager.GameSettings.NickName;
            string userrole = PhotonNetwork.LocalPlayer.CustomProperties[DataKeyValues.__ROLE__].ToString();
            start.FileName = PythonExePath;
            start.Arguments = $"\"{PythonScriptPath}\" " + Language + " " + sessionid  + " " + username + " " + userrole;
            UnityEngine.Debug.Log(start.Arguments);
            start.WorkingDirectory = WorkingDirectory;
        
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)

            using (Process process = Process.Start(start))
            {
                UnityEngine.Debug.Log("python thread started");
                using (StreamReader reader = process.StandardOutput)
                {
                    string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                    string result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
                    UnityEngine.Debug.Log("exception " + stderr);
                    UnityEngine.Debug.Log("result " + result);

                    
                }  
            }     
        }
    }
}
